{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "LilAIPipeline.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNXnIiI+5bQSrZAn5sPxHwG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/gist/MikeMNelhams/bdea8186d35cc0a2c43c93e05b2da674/lilaipipeline.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j4XS0hZrQto5",
        "outputId": "64c6d60a-3d68-4f52-d6a9-0e842aaac382"
      },
      "source": [
        "# !pip install PyGithub"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: PyGithub in /usr/local/lib/python3.6/dist-packages (1.54)\n",
            "Requirement already satisfied: requests<2.25,>=2.14.0 in /usr/local/lib/python3.6/dist-packages (from PyGithub) (2.23.0)\n",
            "Requirement already satisfied: deprecated in /usr/local/lib/python3.6/dist-packages (from PyGithub) (1.2.10)\n",
            "Requirement already satisfied: pyjwt in /usr/local/lib/python3.6/dist-packages (from PyGithub) (1.7.1)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<2.25,>=2.14.0->PyGithub) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<2.25,>=2.14.0->PyGithub) (2.10)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<2.25,>=2.14.0->PyGithub) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<2.25,>=2.14.0->PyGithub) (2020.12.5)\n",
            "Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.6/dist-packages (from deprecated->PyGithub) (1.12.1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dPoCdJS5vHYd"
      },
      "source": [
        "# Package Imports\r\n",
        "import pandas as pd \r\n",
        "import numpy as np\r\n",
        "import matplotlib.pyplot as plt \r\n",
        "from urllib.request import urlopen # The default requests package\r\n",
        "import requests # For making GitHub requests\r\n",
        "from pprint import pprint # For pretty printing\r\n",
        "# from getpass import getpass # For keeping password typing a secret\r\n",
        "\r\n",
        "# For the more advanced requests\r\n",
        "# import base64\r\n",
        "# import os\r\n",
        "# import sys\r\n",
        "# sys.path.append(\"./PyGithub\");\r\n",
        "# from github import Github"
      ],
      "execution_count": 203,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GwcqyUqc2Lk9"
      },
      "source": [
        "# I CAN'T DEAL WITH ANY MORE PYGITHUB CODE. THERE IS ZERO DOCUMENTATION ON THIS ONLINE AND IT'S SO CRYPTIC\r\n",
        "# Instantiate a login onto the project using MIKE'S READ-ONLY Public SSH-RSA Key\r\n",
        "git_ssh_identity_file = os.path.expanduser('~/.ssh/id_rsa')\r\n",
        "git_ssh_cmd = 'ssh -i %s' % git_ssh_identity_file\r\n",
        "\r\n",
        "# The 10 yr old indian kid's tutorial method:\r\n",
        "username = \"MikeMNelhams\" # Type your PUBLIC Github username here\r\n",
        "url = f\"https://api.github.com/users/{username}\"\r\n",
        "user_data = requests.get(url).json()\r\n",
        "\r\n",
        "g = Github(getpass(\"Enter your PAT key\")) # Enter your PAT Key. A system which is so stupidly unsafe it's mindboggling\r\n",
        "\r\n",
        "user = g.get_user(username)\r\n",
        "for repo in g.get_user().get_repos():\r\n",
        "    if repo.name == \"ai-group-project-Team-JMJM\":\r\n",
        "      r_proj_clone = repo\r\n",
        "      break\r\n",
        "    # to see all the available attributes and methods\r\n",
        "    print(dir(repo))\r\n",
        "\r\n",
        "# dir(r_proj_clone)\r\n",
        "contents = repo.get_contents(\"ai-group-project-Team-JMJM/RapLyrics/\", ref=GIT_BRANCH)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u3BgxNbWvR06"
      },
      "source": [
        "# Data Imports (Testing)\r\n",
        "URLS = ['https://raw.githubusercontent.com/EMAT31530/ai-group-project-Team-JMJM/master/RapLyrics/UNCLEAN/Kanye_WestUC.txt']\r\n",
        "censors = pd.read_csv(\"https://raw.githubusercontent.com/EMAT31530/ai-group-project-Team-JMJM/master/RapLyrics/UNCLEAN/censors.csv\").to_numpy()\r\n",
        "RAP_DATA = []\r\n",
        "rap_lyric_names = []\r\n",
        "for URL in URLS: \r\n",
        "  title_start = URL.find('UNCLEAN')\r\n",
        "  title_len = URL[title_start:].find('.')\r\n",
        "  rap_lyric_names.append(URL[title_start + 8:title_start + title_len])\r\n",
        "\r\n",
        "# Import all of the URLS, this will be streamlined once I figure out how to use pygithub better O(n)\r\n",
        "for URL, name in zip(URLS, rap_lyric_names): \r\n",
        "  RAP_DATA.append([name, urlopen(URL).read().decode(\"utf-8\")])\r\n",
        "\r\n",
        "# Remove the annoying \\ufeff at the beginning O(n) and make it all lower case\r\n",
        "for count, lyric in enumerate(RAP_DATA): \r\n",
        "  RAP_DATA[count] = [lyric[0], lyric[1][1:].lower()]\r\n",
        "\r\n",
        "print(censors.shape)\r\n",
        "# Remove the stop words O(n*m)\r\n",
        "for count, lyric in enumerate(RAP_DATA): \r\n",
        "  for i in range(len(censors[0:])):\r\n",
        "    RAP_DATA[count][1] = lyric[1].replace(censors[i, 0], censors[i, 1])\r\n",
        "\r\n",
        "print(RAP_DATA[0][1])"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
